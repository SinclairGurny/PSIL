
  ***********************************************
  ***_______*****_________****_______****___******
  **|\   _  \***|\   _____\**/\__   _\**|\  \******
  **\ \  \\  \**\ \  \____|**\/_ \  \/**\ \  \******
  ***\ \  \\  \**\ \  \_____****\ \  \***\ \  \******
   ***\ \  ___/***\ \____   \****\ \  \***\ \  \******
    ***\ \ \_/*****\/____|\  \****\ \  \***\ \  \******
     ***\ \ \*********____\\  \****\_\  \_**\ \  \_____*
      ***\ \_\*******/\________\**/\      \**\ \_______\*
       ***\/_/*******\/________/**\/______/***\/_______/*
        *************************************************


PSIL:
Stands for Programming Some Idiotic Lisp.
(It's actually based on Scheme Syntax)

PSIL is a WIP compiler for my own version of a LISP like language

written by Sinclair Gurny
Starting in July 2019

================================================================================================

Compiling:
make - for normal
make debug - full parsing output with delay
make clean - delete unnecessary files

Running:
./psil

REPL Commands:
quit - exits
exit - also exits
help - displays commands
psil - displays syntax of current version of PSIL

=================================================================================================

Syntax:
<program> -> <form>+

FORMS:
<form>    -> <definition> | <expression>

DEFINITIONS:
<definition>  -> <var_def>
              |  (begin <definition>+)

<var_def>     -> (define <variable> <expr>)
              |  (define (<variable>+) <expr>)

<variable>    -> <identifier>
<body>        -> <expression>+
	      |  <definition>+ <expression>+

EXPRESSIONS:
<expression>  -> <constant>
              |  <variable>
              |  (lambda <formals> <body>)
              |  (if <expression> <expression> <expression>)
	      |  (cond <expression> <expression>)
              |  (set! <variable> <expression>)
              |  (quote <datum>)
	      |  <application>

<constant>    -> <boolean> | <number> | <character>
<formals>     -> <variable> | (<variable>*)
<application> -> (<expression>) | (<expression> <expression>+)

IDENTIFIERS:
<identifier>  -> ^[a-zA-Z_](?!.) | <operator> | ^[a-zA-Z_][a-zA-Z_0-9\!]+(?!.)
<operator>    -> + | - | * | \ | %

DATA:
<datum>	      -> <boolean> | <number> | <character> | <symbol> | <list>
<boolean>     -> #t | #f
<character>   -> #\<any char> | #\newline | #\space
<symbol>      -> <identifier>
<list>        -> () | (<datum>+)
<number>      -> <integer> | <decimal>
<integer>     -> <pos_num> | <neg_num>
<pos_num>     -> starts with + followed by digits
<neg_num>     -> starts with - followed by digits
<decimal>     -> <pos_dec> | <neg_dec>
<pos_dec>     -> starts with + followed by digits . and more digits
<pos_dec>     -> starts with - followed by digits . and more digits

=====================================================================================================

Standard Forms: ===================

DEFINITION:
define

BINDING CONSTRUCTS:
lambda, let

CONDITIONAL EVALUATION:
if, cond, and, or

SEQUENTIAL EVALUATION:
begin

ITERATION:
lambda

QUOTING:
quote, unquote

ASSIGNMENT:
set!

Standard Procedures: ===============

EQUIVALENCE PREDICATES:
equal?, string=?, char=?

NUMBERS:
 ARITHMETIC:
  +, -, *, /, abs, mod
 APPROX:
  floor, ceiling, truncate, round
 INEQUALITIES:
  <, <=, >, >=, =
 MISC:
  zero?, negative?, positive?

CHARACTERS:
char=?, char<?, char<=?, char>?, char>=?, char>?,

LISTS:
list, first, second, first!, second!, null?

IDENTITY PREDICATES:
boolean?, symbol?, number?, char?, string?, func?

INPUT/OUTPUT:
print, newline, read

BOOLEANS:
boolean?, not


==============================================================================================
=== Lexing and Parsing Library Details =======================================================


All parser names must be written as <name>

For each parser rule:
The rule "<rule1> | <rule2>" matches with either <rule1> or <rule2>
The rule "yes | no" matches with the exact words "yes" or "no"
The rule "{.}" matches with the regex expression "." which matches any single character
The rule "<rule1>+" matches with one or more <rule1>'s

The parsers added directly to the top level of language are ran first. Every other parser
is ran on an as needed basis.

Groups are used to organize parsers within a language.
